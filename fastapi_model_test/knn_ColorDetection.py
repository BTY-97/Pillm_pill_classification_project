# -*- coding: utf-8 -*-
"""kNNColorDetection1130.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BUE5lSdGtbFd3lewMQ0LW-nzCtIeI_w8
"""

import warnings
warnings.filterwarnings("ignore")

import cv2
import os
import os.path
import numpy as np
import pandas as pd
import csv
import math
import operator
import shutil


# data = pd.read_csv('/content/drive/MyDrive/merged_med_5.csv')

def create_training_dataset():
    path = '/content/drive/MyDrive/pills_preprocessing/cropped_pills_no_bg/'
    pill_colors = ['red', 'green', 'blue', 'white', 'black', 'purple']
    for pcolor in pill_colors:
        train_path = '/content/drive/MyDrive/color_detection/color_train_data/{Pcolor}/'.format(Pcolor=pcolor)
        idx = list(data[data['color'] == pcolor].head(100).index)
        for i in idx:
            try:
                shutil.copy(path+'{}_b.jpg'.format(i), train_path+'{pcolor}_{i}_b.jpg'.format(pcolor = pcolor, i = i))
                # shutil.copy(path+'{}_f.jpg'.format(i), train_path+'{pcolor}_{i}_f.jpg'.format(pcolor = pcolor, i = i))
            except:
                shutil.copy(path+'{}_f.jpg'.format(i), train_path+'{pcolor}_{i}_f.jpg'.format(pcolor = pcolor, i = i))

# calculation of euclidead distance
def calculateEuclideanDistance(variable1, variable2, length):
    distance = 0
    for x in range(length):
        distance += pow(variable1[x] - variable2[x], 2)
    return math.sqrt(distance)


# get k nearest neigbors
def kNearestNeighbors(training_feature_vector, testInstance, k):
    distances = []
    length = len(testInstance)
    for x in range(len(training_feature_vector)):
        dist = calculateEuclideanDistance(testInstance,
                training_feature_vector[x], length)
        distances.append((training_feature_vector[x], dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors = []
    for x in range(k):
        neighbors.append(distances[x][0])
    return neighbors


# votes of neighbors
def responseOfNeighbors(neighbors):
    all_possible_neighbors = {}
    for x in range(len(neighbors)):
        response = neighbors[x][-1]
        if response in all_possible_neighbors:
            all_possible_neighbors[response] += 1
        else:
            all_possible_neighbors[response] = 1
    sortedVotes = sorted(all_possible_neighbors.items(),
                         key=operator.itemgetter(1), reverse=True)
    return sortedVotes[0][0]


# Load image feature data to training feature vectors and test feature vector
def loadDataset(
    filename,
    # filename2,
    training_feature_vector=[],
    # test_feature_vector=[],
    ):
    with open(filename) as csvfile:
        lines = csv.reader(csvfile)
        dataset = list(lines)
        for x in range(len(dataset)):
            for y in range(3):
                dataset[x][y] = float(dataset[x][y])
            training_feature_vector.append(dataset[x])

    # with open(filename2) as csvfile:
    #     lines = csv.reader(csvfile)
    #     dataset = list(lines)
    #     for x in range(len(dataset)):
    #         for y in range(3):
    #             dataset[x][y] = float(dataset[x][y])
    #         test_feature_vector.append(dataset[x])


def knn(training_data, img, k = 3):
    training_feature_vector = []  # training feature vector
    test_feature_vector = []  # test feature vector
    loadDataset(training_data, training_feature_vector)
    test_feature_vector = color_histogram_of_test_image_hsv(img)
    classifier_prediction = []  # predictions
    # k = 11  # K value of k nearest neighbor
    for x in range(len(test_feature_vector)):
        neighbors = kNearestNeighbors(training_feature_vector, test_feature_vector[x], k)
        result = responseOfNeighbors(neighbors)
        classifier_prediction.append(result)
    return classifier_prediction[0]


def create_hsv_training_data():

    # checking whether the training data is ready
    PATH = '/content/drive/MyDrive/color_detection/'

    if os.path.isfile(PATH) and os.access(PATH, os.R_OK):
        print ('training data is ready, classifier is loading...')
    else:
        print ('training data is being created...')
        open('/content/drive/MyDrive/color_detection/hsv_training.data', 'w')
        training_hsv()
        print ('training data is ready, classifier is loading...')


def get_hsv2(img):
  height, width, channel = img.shape
  hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
  h,s,v = cv2.split(hsv)
  h = h/180.0
  s = s/255.0
  v = v/255.0
  
  return h,s,v


def color_histogram_of_test_image_hsv(test_src_image):

    # load the image
    image = test_src_image
    chans = np.float32(get_hsv2(image))
    colors = ('h', 's', 'v')
    features = []
    feature_data = []
    counter = 0
    for (chan, color) in zip(chans, colors):
        counter = counter + 1
        if counter == 1:
            hist = cv2.calcHist([chan], [0], None, [360], [0.01, 1])
            features.extend(hist)
        elif counter == 2:
            hist = cv2.calcHist([chan], [0], None, [100], [0.01, 1])
            features.extend(hist)
        elif counter == 3:
            hist = cv2.calcHist([chan], [0], None, [100], [0.11, 1])
            features.extend(hist)

        # find the peak pixel values for R, G, and B
        elem = np.argmax(hist)
        if counter == 1:
            H = elem/360.0
        elif counter == 2:
            S = elem/100.0
        elif counter == 3:
            V = elem/100.0
            feature_data = [[H,S,V]]

            # print(feature_data)
    return feature_data
    # with open('/content/drive/MyDrive/color_detection/hsv_test.data', 'w') as myfile:
    #     myfile.write(feature_data)

def color_histogram_of_training_image_hsv(img_name):

    # detect image color by using image file name to label training data
    if 'red' in img_name:
        data_source = 'red'
    elif 'green' in img_name:
        data_source = 'green'
    elif 'blue' in img_name:
        data_source = 'blue'
    elif 'white' in img_name:
        data_source = 'white'
    elif 'black' in img_name:
        data_source = 'black'
    elif 'purple' in img_name:
        data_source = 'purple'

    # load the image
    image = cv2.imread(img_name)
    image = cv2.resize(image,(224,224))
    image = np.array(image, dtype=np.float32)
    chans = get_hsv2(image)
    colors = ('h', 's', 'v')
    features = []
    feature_data = ''
    counter = 0

    for (chan, color) in zip(chans, colors):
        counter = counter + 1
        if counter == 1:
            hist = cv2.calcHist([chan], [0], None, [360], [0.01, 1])
            features.extend(hist)
        elif counter == 2:
            hist = cv2.calcHist([chan], [0], None, [100], [0.01, 1])
            features.extend(hist)
        elif counter == 3:
            hist = cv2.calcHist([chan], [0], None, [100], [0.11, 1])
            features.extend(hist) 

        # find the peak pixel values for H, S, and V
        elem = np.argmax(hist)
        if counter == 1:
            H = str(elem/360.0)
            
        elif counter == 2:
            S = str(elem/100.0)

        elif counter == 3:
            V = str(elem/100.0)
            feature_data = H + ',' + S + ',' + V

    with open('/content/drive/MyDrive/color_detection/hsv_training.data', 'a') as myfile:
        myfile.write(feature_data + ',' + data_source + '\n')


def training_hsv():

    # red color training images
    for f in os.listdir('/content/drive/MyDrive/color_detection/color_train_data/red'):
        color_histogram_of_training_image_hsv('/content/drive/MyDrive/color_detection/color_train_data/red/' + f)

    # green color training images
    for f in os.listdir('/content/drive/MyDrive/color_detection/color_train_data/green'):
        color_histogram_of_training_image_hsv('/content/drive/MyDrive/color_detection/color_train_data/green/' + f)

    # blue color training images
    for f in os.listdir('/content/drive/MyDrive/color_detection/color_train_data/blue'):
        color_histogram_of_training_image_hsv('/content/drive/MyDrive/color_detection/color_train_data/blue/' + f)		

    # white color training images
    for f in os.listdir('/content/drive/MyDrive/color_detection/color_train_data/white'):
        color_histogram_of_training_image_hsv('/content/drive/MyDrive/color_detection/color_train_data/white/' + f)

    # black color training images
    for f in os.listdir('/content/drive/MyDrive/color_detection/color_train_data/black'):
        color_histogram_of_training_image_hsv('/content/drive/MyDrive/color_detection/color_train_data/black/' + f)

    # purple color training images
    for f in os.listdir('/content/drive/MyDrive/color_detection/color_train_data/purple'):
        color_histogram_of_training_image_hsv('/content/drive/MyDrive/color_detection/color_train_data/purple/' + f)


def predict_hsv(source, train_data, k = 3):
    prediction = list()
    prediction = knn(train_data, source, k)

    return prediction


def detect_color(img, train_data, k = 3):
  image = np.array(img, dtype=np.float32)
  result = predict_hsv(image, train_data, k)

  return result


def load_testset(startidx, maxidx):
    path = '/content/drive/MyDrive/pills_preprocessing/cropped_pills_no_bg/'
    source_image = list()
    cnt = 0
    error = 0
    print('이미지 로드 중...')
    for i in range(startidx, maxidx):
        try:
            source = cv2.imread(path+'{}_f.jpg'.format(i))
            source = cv2.resize(source,(224,224))
            source_image.append(np.array(source,dtype=np.float32))
        except:
            print('error')
            error += 1
            source_image.append((np.zeros((224,224,3))))
        cnt += 1

        if i%100==0:
            print(i,' Done')
    print('이미지 로드 완료...')
    return source_image


def hsv_test(startidx, maxidx, k=3):
    data = pd.read_csv('/content/drive/MyDrive/merged_med_5.csv')
    train_data = '/content/drive/MyDrive/color_detection/hsv_training.data'
    imset = load_testset(startidx, maxidx)
    resultList = list()
    errorCount = 0
    errorList = list()
    correct_df = pd.DataFrame()
    for count in range(len(imset)):
        try:
            resultList.append(predict_hsv(imset[count], train_data, k))
        except:
            errorCount += 1
            resultList.append('error')
            errorList.append(count)
        if count % 100 == 0:
            print(count, ' Done,', errorCount, ' errors')
            
    point = 0
    earnpoint = 0
    errors_df = pd.DataFrame()
    for i in range(len(imset)):
        for j in range(len(resultList[i])):
            if resultList[i][j] in data['color'][i+startidx]:
                earnpoint = 1
                correct_temp = pd.DataFrame({'Prediction' : [resultList[i]], 'CorrectAnswer': data['color'][i+startidx]},index = [i+startidx])
                correct_df = pd.concat([correct_df,correct_temp], ignore_index=False)
        if earnpoint == 0:
            # errors[i] = [resultList[i], data['색상'][i]]
            errors_temp = pd.DataFrame({'Prediction' : [resultList[i]], 'CorrectAnswer': data['color'][i+startidx]},index = [i+startidx])
            errors_df = pd.concat([errors_df,errors_temp], ignore_index=False)
            # print(errors[i])
        point += earnpoint
        earnpoint = 0
    print(str(point/len(imset)*100)+'%')

    return correct_df



